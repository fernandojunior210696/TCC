# load required packages
library(tidyverse)
library(magrittr)
library(lubridate)
library(kamila)
library(zoo)
library(psych)
# clustering
# library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(caret)
# read databases
all_songs <- read_csv('2.Datasets/songs_features_v2.csv')
most_popular <- read_csv('2.Datasets/most_popular_v2.csv')
clustering_features <- read_csv('2.Datasets/clusterig_features_v2.csv')
# encode factors features
all_songs$time_signature %<>% as.factor()
all_songs$mode %<>% as.factor()
all_songs$key %<>% as.factor()
most_popular$time_signature %<>% as.factor()
most_popular$mode %<>% as.factor()
most_popular$key %<>% as.factor()
# encode date features
all_songs$track.album.release_date %<>% as.Date()
most_popular$data %<>% as.Date()
most_popular$track.album.release_date %<>% as.Date()
most_popular$ano_mes <- as.yearmon(most_popular$data)
most_popular$ano_mes %<>% factor(ordered = TRUE)
# # create feature of days since release
# all_songs$days_since_release <- date('2020-03-14') - all_songs$track.album.release_date
# most_popular$days_since_release <- date('2020-03-14') - most_popular$track.album.release_date
#
# # encode days since release as numeric
# all_songs$days_since_release %<>% as.integer()
# most_popular$days_since_release %<>% as.integer()
## we are going to test some approachs in order to cluster the popular songs
# 1. Let's consider all songs that were popular at any moment
# dataframe filtered
songs_pop <- most_popular %>%
select(-c(data, mes, ano, ano_mes, Position)) %>%
unique() %>%
drop_na()
# join clustering features
df <- songs_pop %>% inner_join(clustering_features, by = 'track.id')
# create dataframe with continuous features
MP_continuous <- df %>%
select(-c('track.id', 'track.name','track.popularity','track.album.release_date', 'key', 'mode',
'time_signature'))
# scale dataframe with continuous features
MP_continuous %<>%
scale() %>%
data.frame()
# create dataframe with factors features
MP_factors <- songs_pop %>%
select(c('key', 'mode', 'time_signature')) %>%
data.frame()
# create cluster model (10-fold cv)
model <- kamila(MP_continuous, MP_factors, numClust = 2 : 10, numInit = 10,
calcNumClust = "ps", numPredStrCvRun = 10, predStrThresh = 0.5)
# join clustering features
full_df <- songs_pop %>% left_join(clustering_features, by = 'track.id')
# label all songs in one of the existing one
full_df$cluster <- model$finalMemb
MP_continuous$cluster <- model$finalMemb
# MP_continuous$cluster <- model$finalMemb
# number of songs per cluster
table(full_df$cluster)/ nrow(full_df)
# best number of clusters (prediction strength method)
model$nClust$bestNClust
# load required packages
library(tidyverse)
library(magrittr)
library(lubridate)
library(kamila)
library(zoo)
library(psych)
# clustering
# library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(caret)
# read databases
all_songs <- read_csv('2.Datasets/songs_features_v2.csv')
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/TCC")
# read databases
all_songs <- read_csv('2.Datasets/songs_features_v2.csv')
most_popular <- read_csv('2.Datasets/most_popular_v2.csv')
clustering_features <- read_csv('2.Datasets/clusterig_features_v2.csv')
# encode factors features
all_songs$time_signature %<>% as.factor()
all_songs$mode %<>% as.factor()
all_songs$key %<>% as.factor()
most_popular$time_signature %<>% as.factor()
most_popular$mode %<>% as.factor()
most_popular$key %<>% as.factor()
# encode date features
all_songs$track.album.release_date %<>% as.Date()
most_popular$data %<>% as.Date()
most_popular$track.album.release_date %<>% as.Date()
most_popular$ano_mes <- as.yearmon(most_popular$data)
most_popular$ano_mes %<>% factor(ordered = TRUE)
# dataframe filtered
songs_pop <- most_popular %>%
select(-c(data, mes, ano, ano_mes, Position)) %>%
unique() %>%
drop_na()
# join clustering features
df <- songs_pop %>% inner_join(clustering_features, by = 'track.id')
# create dataframe with continuous features
MP_continuous <- df %>%
select(-c('track.id', 'track.name','track.popularity','track.album.release_date', 'key', 'mode',
'time_signature'))
# scale dataframe with continuous features
MP_continuous %<>%
scale() %>%
data.frame()
# create dataframe with factors features
MP_factors <- songs_pop %>%
select(c('key', 'mode', 'time_signature')) %>%
data.frame()
# create cluster model (10-fold cv)
model <- kamila(MP_continuous, MP_factors, numClust = 2 : 10, numInit = 10,
calcNumClust = "ps", numPredStrCvRun = 10, predStrThresh = 0.5)
# join clustering features
full_df <- songs_pop %>% left_join(clustering_features, by = 'track.id')
# label all songs in one of the existing one
full_df$cluster <- model$finalMemb
MP_continuous$cluster <- model$finalMemb
# number of songs per cluster
table(full_df$cluster)/ nrow(full_df)
# best number of clusters (prediction strength method)
model$nClust$bestNClust
# create cluster model (10-fold cv)
model <- kamila(MP_continuous, MP_factors, numClust = 2 : 10, numInit = 10,
calcNumClust = "ps", numPredStrCvRun = 10, predStrThresh = 0.5)
# join clustering features
full_df <- songs_pop %>% left_join(clustering_features, by = 'track.id')
# label all songs in one of the existing one
full_df$cluster <- model$finalMemb
MP_continuous$cluster <- model$finalMemb
# number of songs per cluster
table(full_df$cluster)/ nrow(full_df)
# best number of clusters (prediction strength method)
model$nClust$bestNClust
# original scale
clusters_mean <- full_df %>%
select(-c('track.id', 'track.album.release_date')) %>%
group_by(cluster) %>%
summarise(size = n(),
danceability_mean = mean(danceability),
energy_media = mean(energy),
# key_median = median(key),
loudness_mean = mean(loudness),
# mode_median = meadian(mode),
speechiness_mean = mean(speechiness),
acousticness_mean = mean(acousticness),
instrumentalness_mean = mean(instrumentalness),
liveness_mean = mean(liveness),
valence_mean = mean(valence),
tempo_mean = mean(tempo),
duration_ms_mean = mean(duration_ms),
# time_signature_median = median(time_signature),
popularity_mean = mean(track.popularity),
days_since_release_median = median(days_since_release)
) %>%
round(2)
# normalized scale
normalized_clusters_mean <- MP_continuous %>%
group_by(cluster) %>%
summarise(size = n(),
danceability_mean = mean(danceability),
energy_media = mean(energy),
# key_median = median(key),
loudness_mean = mean(loudness),
# mode_median = meadian(mode),
speechiness_mean = mean(speechiness),
acousticness_mean = mean(acousticness),
instrumentalness_mean = mean(instrumentalness),
liveness_mean = mean(liveness),
valence_mean = mean(valence),
tempo_mean = mean(tempo),
duration_ms_mean = mean(duration_ms),
# time_signature_median = median(time_signature),
# popularity_mean = mean(track.popularity),
days_since_release_median = mean(days_since_release),
days_until_pop_median = mean(days_until_pop),
days_from_pop_to_top_median = mean(days_from_pop_to_top),
days_from_top_until_leave_median = mean(days_from_top_until_leave)
) %>%
round(2)
MP_continuous
fviz_cluster(list(data = MP_continuous[, -"cluster"],
cluster = full_df$cluster),
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Projeção dos segmentos em duas dimensões")
fviz_cluster(list(data = MP_continuous[, -c("cluster")],
cluster = full_df$cluster),
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Projeção dos segmentos em duas dimensões")
fviz_cluster(list(data = MP_continuous[, -17],
cluster = MP_continuous$cluster),
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw(),
main = "Projeção dos segmentos em duas dimensões")
fviz_cluster(list(data = MP_continuous[, -17],
cluster = MP_continuous$cluster),
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex")
MP_continuous[, -17]
MP_continuous[, -17] %>% View()
fviz_cluster(list(data = MP_continuous,
cluster = MP_continuous$cluster),
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
geom = "point",
ellipse.type = "convex")
rlang::last_error()
fviz_cluster(list(data = MP_continuous,
cluster = MP_continuous$cluster),
geom = "point",
ellipse.type = "convex")
fviz_cluster(list(data = MP_continuous[, -17],
cluster = MP_continuous$cluster),
geom = "point",
ellipse.type = "convex")
library(MASS)
data("mtcars")
parcoord( mtcars[,1:4], col=rainbow(length(mtcars[,1])), var.label=TRUE)
rainbow(length(mtcars[,1])
)
parcoord( MP_continuous[,-17], col=rainbow(length(MP_continuous[,-17])), var.label=TRUE)
parcoord( MP_continuous[,-17], col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
parcoord( MP_continuous[,17], col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
parcoord( MP_continuous, col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
?parcoord
parcoord( MP_continuous[, 1:3], col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
parcoord( MP_continuous[, :15:17], col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
parcoord( MP_continuous[, 15:17], col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
parcoord( MP_continuous[, 15:16], col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
parcoord( MP_continuous, col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
parcoord( full_df, col=rainbow(length(MP_continuous[,17])), var.label=TRUE)
fviz_cluster(list(data = MP_continuous[, -17],
cluster = MP_continuous$cluster),
geom = "point",
ellipse.type = "convex")
fviz_cluster(list(data = MP_continuous[, -17],
cluster = MP_continuous$cluster),
geom = "point",
ellipse.type = "convex",
main = "Projeção em duas dimensões dos segmentos")
?fviz
?fviz_cluster
fviz_cluster(list(data = MP_continuous[, -17],
cluster = MP_continuous$cluster),
geom = "point",
ellipse.type = "convex",
main = "Projeção em duas dimensões dos segmentos")
MP_continuous
